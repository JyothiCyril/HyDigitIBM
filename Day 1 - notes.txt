When to choose automation over manual testing?

Regression testing , Retesting , Compatiablity testing ( multiple environment / multiple browser), Repeated input testing 

All above the testing cycles is very exhaustive to be done manual

What is an automation testing?

testing done using an automation tool.

It is process of automating an application by recording and playing back the user events to validate the application under test for positive and negative testing...

As every automation tool needs a test code / test script which is set of instructions to perfom the user events

Automation testing activities are categorized into : 2 activities:

Test designing & test execution

Test designing : It is process of creating the test code that captures the user events / actions (Keyboard / mouse instructions) to be performed on the application

Test execution : Execution of the test script against the application (AUT)

How to automate an application using Selenium which is a open source test automation tool for BBT ( Black box testing)

Functionality testing from front end (GUI) of an application is tested...

** Selenium is primarily designed to automate an Web application only.


Selenium is developed ThoughtWorks 

--> initially it is designed to perform WBT, later the team had redesigned the component that can do BBT

Visit the official website of Selenium : www.selenium.dev

Components of Selenium

There are 4 components later it is dissolved into 3 components...

1. Selenium IDE : Integrated Development Environment : Plugin / add on only with Chrome and Firefox
** The test script / code written can be designed and executed only with the respective browsers

2. Selenium RC (Selenium 1.0) : Remote Control --> Dissolved / migrated to WebDriver : Cross browser testing component : Because of the complex architecture that is degraded the performance of test execution..

(>Selenium 2.0 is a WebDriver, Current  version : 3.141.59 , Beta version : 4.0.0)

3. Web driver : revised version of RC : with less complex architecture, that can help to do cross browser testing
** Test code created once can be executed on the different browser

4. Selenuim GRID : Cross platform testing

** web driver code written will be executed against different platforms(OS : Window, Mac, Linux etc.)

Selenium GRID uses / generates the Virtual Platform in the form of Hub & node

Hub being the primary system that triggers actions / test code on different nodes with different OS


Web driver --> Selenium : automate an application

Web driver is a component in Selenium used to perform cross browser testing

Web driver  is a multi language, multi platform & multi browser
multi language : different programing languages (Java, Python, Ruby, C# Java Script etc.)
Multi platform : WebDriver can be deployed on any of OC. : It is platform independent...
Multi Browser : Code create once can be executed on different browsers(chrome, IE, FF, edge,safari etc..)

** WebDriver do not have an Interface, it is configured as an API which is a self-contained library

How should we do test designing and execution...

We take the support of the IDE available based on the programing language chosen for test code development...

Java --> Eclipse / InteliJ / STS


Environmental Set up:

1. JDk 1.8
2. Eclipse IDE --> Oxygen
3. Selenium library --> .jar
	1. Selenium Client library --> selenium-client.jar
	2. Selenium-server-standalone.jar --> Only when we use the client langauge any thing other than Java
4. Driver executable / Driver binaries --> (.exe) based the browser that we need to work for



To configure the driver library

System.setProperty("Key","Value");

Key : the key webdriver instance as per JSON format
Value : path of the driver executable present in the local system... --> full path of .exe file
** case sensitive



Key for different browser: * Key is always lower case

Chrome Browser : "webdriver.chrome.driver"
Firefox Browser: "webdriver.gecko.driver"
IR Browser     : "webdriver.ie.driver"
Edge browser   : "webdriver.edge.driver"


Pre-requisite:

Feasability study
Review Test case to be automated
Test Environment
Application should up and run --> build.exe


2 activities :

Test designing : process writing the test code for the AUT as per the test scenario

Test Execution : Executing the code against the application....


Structure of Test script:

Test script is a collection of Test Objects, Test Object Description, Method & Test Data / Expected value.

Structure of the application

WebPage --> has WebElement (GUI element / objects on the page / Test Objects like: Input, Checkbox, links, radiobutton, etc..)

WebPage is triggered by a URL --> get() for WebDriver interface....


Target the WebElement on the WebPage.. 


WebElement has 2 components : Locator & Method , Test data (*optional)



Test automation process : Systematical approach of automating an application (Implementing , Executing & maintaining the test script)


Step 1 : Creating GUI reference : it is a process of identifying the webelement based the unique description. --> Object Identification in selenium using "Locators"

Step 2 : Create the Test script : It is process of converting the test steps into a test code

Step 3 : Customize the test script : Enhancing the test script as the per test scenarion also as per set of guidelines prescribed for the test automation framework --> Readable, Reusable, Maintainable etc...

Step 4 :  Debug the test script : Check the test script for syntax & logical errors

Step 5 : Run the test script : Execute the test code against the application

Step 6 : Generate the test results



 Object Identification in selenium using "Locators"


Locator : is a unique test object description available in the selenium library that can be used of identifying the elements at the time of execution....

Every element may have several properties --> Not all the properties are locators... 

**  Locators are expected to be unique & stable..

Unique: no 2 elements should have same description
Stable : the element description should not be changing dynamically....

2 types of locators in Selenium

1. attribute based locators : derived from the HTMl design of the page

	1. HTML ID : 1st priority : ID value is unique...
	2. Name : 2nd priority  : ** Name property is not available / name property might change dynamically....
	3. ClassName : last priority : ** Value of the class name has space can't used for identification...
Hyperlinks:
	4. LinkText : 3rd Priority
	5. PartialLinkText optional replacement for link text, when certain sub string of the link text to be used for identification...

	6. Tagname : Group of element which belong to the specific tag name

2. Structure based locators : derived from the structure of the page, based on how the element is positioned on the page... --> alternative mechanism to identify the object using 
	Xpath : 4th Priority
	CSS

HTML properties for Search text box

<input type="text" id="twotabsearchtextbox" value="" name="field-keywords" autocomplete="off" placeholder="" class="nav-input nav-progressive-attribute" dir="auto" tabindex="0" aria-label="Search">

TC:

1. Open Browser and launch the URL
2. Select category
3. Enter the item name
4. click on submit
5. check the title
6. Close the browser

3 elements 

1. Catergory :
----------
Locator:
Type: select
action : select
input : Books


2. Search Text box:
---------
Locator:
Type : input
action : type
input : Da vinci code


<input type="text" id="twotabsearchtextbox" value="" name="field-keywords" autocomplete="off" placeholder="" class="nav-input nav-progressive-attribute" dir="auto" tabindex="0" aria-label="Search">

TagName: input --> multiple element found with same tagname
id:twotabsearchtextbox --> 1st priority
name:field-keywords --> 2nd priority
classname:nav-input nav-progressive-attribute --> rejected 


3. Magnifier button
------------
Locator
Type: button / input
action: click
input : NA


<span class="a-size-medium a-color-base a-text-normal" dir="auto">The Da Vinci Code: (Robert Langdon Book 2)</span>

<span class="a-size-medium a-color-base a-text-normal" dir="auto">The Da Vinci Code (Abridged Edition)</span>

<span class="a-size-medium a-color-base a-text-normal" dir="auto">The Da Vinci Code</span>

<span class="a-size-medium a-color-base a-text-normal" dir="auto">Crime and Punishment</span>



//tagname[@attributeName='AttributeValue']

//span[@class='a-size-medium a-color-base a-text-normal']


Page Object Model : It is a design pattern used in Selenium for creating the Object Repository.

What is OR? Is a centralized location (class file) that can hold the test object description seperated from the test script...

Why?

Object description is reused several time with the same test script or to the other test script --> By Creating OR, The scope / visiblity is extended to multiple test scripts...


Whenever there is change in test object descriptio, we can modify the OR without disturbing the test code...


Using PageFactory --> Class in Selenium which has different annotation and absrtact methods that can help to store the element description in a prescribed manner...






<input type="text" onblur="fieldTrack(this);" name="name36616bf5" value="" style="width:185px;" maxlength="61">
<input type="text" onblur="fieldTrack(this);" name="name8162c85d" value="" style="width:185px;" maxlength="61">
<input type="text" onblur="fieldTrack(this);" name="nameb4d9f31b" value="" style="width:185px;" maxlength="61">

name="name36616bf5"
name="name8162c85d"
name="nameb4d9f31b"


Abs Xpath -->  Parent element --> /

html/body/center/form/div/table[2]/tbody/tr[3]/td[3]/input

/html/body/center/form/div/table[2]/tbody/tr[3]/td[3]/input


rel Xpath -->  Reach the child element based on the descendents --> //
//table[2]/tbody/tr[3]/td[3]/input


//*[@id="tblcrtac"]/tbody/tr[3]/td[3]/input


//input[contains(@name,'login')]



